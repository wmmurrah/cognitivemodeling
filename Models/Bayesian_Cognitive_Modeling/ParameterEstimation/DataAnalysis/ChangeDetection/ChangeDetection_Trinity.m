%%  Change Detection (Example 5.4)

clear;

%% Data
load Changepointdata data;
% Rename
c = data;

%% Constants
n = length(c); % numberr of points
t = 1 : n;     % time points

%% Trinity constants

% Graphical model script
modelName = 'ChangeDetection';

% Parameters to monitor
params = {'mu', 'sigma', 'tau'};

% MCMC properties
nChains    = 3;   % number of MCMC chains
nBurnin    = 1e3; % number of discarded burn-in samples
nSamples   = 1e3; % number of collected samples
nThin      = 1;   % number of samples between those collected
doParallel = 0;   % whether MATLAB parallel toolbox parallizes chains

% Assign MATLAB variables to the observed nodes
data = struct('c', c, ...
    't', t, ...
    'n', n);

% Generator for initialization
generator = @()struct('mu'     , rand(1, 2), ...
    'lambda' , 1         , ...
    'tau'    , n/2);

% Which engine to use
engine = 'jags';

%% Sample using Trinity

tic; % start clock
[stats, chains, diagnostics, info] = callbayes(engine, ...
    'model'           , [modelName '.txt']                        , ...
    'data'            , data                                      , ...
    'outputname'      , 'samples'                                 , ...
    'init'            , generator                                 , ...
    'allowunderscores', 1                                         , ...
    'initfilename'    , modelName                                 , ...
    'scriptfilename'  , modelName                                 , ...
    'logfilename'     , modelName                                 , ...
    'nchains'         , nChains                                   , ...
    'nburnin'         , nBurnin                                   , ...
    'nsamples'        , nSamples                                  , ...
    'monitorparams'   , params                                    , ...
    'thin'            , nThin                                     , ...
    'workingdir'      , ['/tmp/' modelName]                       , ...
    'verbosity'       , 0                                         , ...
    'saveoutput'      , true                                      , ...
    'parallel'        , doParallel                                , ...
    'modules'         , {'dic'} );
fprintf('%s took %f seconds!\n', upper(engine), toc); % show timing

%% Inspect the results
% First, inspect the convergence of each parameter
disp('Convergence statistics:')
grtable(chains, 1.05)

% Now check some basic descriptive statistics averaged over all chains
disp('Descriptive statistics for all chains:')
codatable(chains)

%% Analysis
% Expected change point, and values before and after
meanTau  = codatable(chains,  'tau', @mean);
muBefore = codatable(chains, 'mu_1', @mean);
muAfter  = codatable(chains, 'mu_2', @mean);

% Figure
figure(1); clf; hold on;
set(gcf, ...
    'color'             ,            'w' , ...
    'units'             ,   'normalized' , ...
    'position'          ,  [.2 .2 .6 .6] , ...
    'paperpositionmode' ,         'auto' );

% Data axes, LHS
axis([0 1200 5 75]);
set(gca, ...
    'xtick'             ,  200 : 200 : 1200 , ...
    'ytick'             ,      10 : 10 : 70 , ...
    'box'               ,             'off' , ...
    'tickdir'           ,             'out' , ...
    'ticklength'        ,          [0.01 0] , ...
    'fontsize'          ,               14  );

% Labels
xlabel('Time' , 'fontsize', 16);
ylabel('Count', 'fontsize', 16);

% Plot data
plot(t, c, 'k-', ...
    'color', [.5 .5 .5]);

% Plot means before and after change point
plot([1  meanTau], muBefore * ones(1, 2), 'k-', ...
    'linewidth', 2);
plot([meanTau+1  n], muAfter * ones(1, 2), 'k-', ...
    'linewidth', 2);

