%% Inferring Number of Surveys Distributed and Return Rate (Example 3.6)

clear;

%% Data
dataSet = 2;
switch dataSet
    case 1, k = [16 18 22 25 27]; % counts of surveys returned
    case 2, k = [16 18 22 25 28]; % slightly different counts of surveys returned
end;
m    = length(k); % number of survey return counts
nmax = 500;       % maximum possible number of surveys

%% Trinity constants

% Graphical model script
modelName = 'Survey';

% Parameters to monitor
params = {'theta', ...
          'n'};

% MCMC properties
nChains    = 3;   % number of MCMC chains
nBurnin    = 1e3;   % number of discarded burn-in samples
nSamples   = 5e3; % number of collected samples
nThin      = 1;   % number of samples between those collected
doParallel = 0;   % whether MATLAB parallel toolbox parallizes chains

% Assign MATLAB variables to the observed nodes
data = struct('k',k, ...
              'm',m, ...
              'nmax', nmax);

% Generator for initialization
generator = @()struct('theta', rand, ...
                      'n'    , round(nmax/2));

% Which engine to use
engine = 'jags';

%% Sample using Trinity

tic; % start clock
[stats, chains, diagnostics, info] = callbayes(engine, ...
    'model'           , [modelName '.txt']                        , ...
    'data'            , data                                      , ...
    'outputname'      , 'samples'                                 , ...
    'init'            , generator                                 , ...
    'datafilename'    , modelName                                 , ...
    'initfilename'    , modelName                                 , ...
    'scriptfilename'  , modelName                                 , ...
    'logfilename'     , modelName                                 , ...
    'nchains'         , nChains                                   , ...
    'nburnin'         , nBurnin                                   , ...
    'nsamples'        , nSamples                                  , ...
    'monitorparams'   , params                                    , ...
    'thin'            , nThin                                     , ...
    'workingdir'      , ['/tmp/' modelName]                       , ...
    'verbosity'       , 0                                         , ...
    'saveoutput'      , true                                      , ...
    'parallel'        , doParallel                                , ...
    'modules'         , {'dic'} );
fprintf('%s took %f seconds!\n', upper(engine), toc); % show timing

%% Inspect the results
% First, inspect the convergence of each parameter
disp('Convergence statistics:')
grtable(chains, 1.05)

% Now check some basic descriptive statistics averaged over all chains
disp('Descriptive statistics for all chains:')
codatable(chains)


%% Analysis

% Figure
figure(60 + dataSet); clf; hold on;
set(gcf, ...
    'color'             ,            'w' , ...
    'units'             ,   'normalized' , ...
    'position'          ,  [.2 .2 .6 .6] , ...
    'paperpositionmode' ,         'auto' );

% Scatter histogram
H = scatterhist(chains.n(:), chains.theta(:), ...
    'nbins'    , [20 20], ...
    'direction', 'out', ...
    'location' , 'southeast', ...
    'color'    , 'k');
set(H(1), 'fontsize', 14, ...
          'tickdir' , 'out');
            
% Labels
xlabel('Number of surveys \it n', ...
       'fontsize', 16);
ylabel('Return rate \theta', 'fontsize',16);

% Expectation
axis(H(1)); hold on;
plot(codatable(chains, '^n$', @mean), codatable(chains, 'theta', @mean), 'rx', ...
         'markersize', 12, ...
         'linewidth' ,  2);

% Maximum Likelihood
binEdges{1} = 0 : nmax;     % n                        
binEdges{2} = 0 : 0.01 : 1; % theta

% Find ML by 2D histogram, taking bin with greatest count
count = hist3([chains.n(:) chains.theta(:)], ...
                  'edges', binEdges);                              % histogram counts
[~, index] = max(count(:));                                        % find index of maximum
[nIndex, thetaIndex] = ind2sub(size(count), index);                % convert to row and column indices
plot(binEdges{1}(nIndex), binEdges{2}(thetaIndex), 'go', ...
         'markerfacecolor', 'w');